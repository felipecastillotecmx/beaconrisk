name: CI â€” Tests, Coverage, SonarQube

on:
  push:
    branches: [ "main", "master", "semana_2", "releases/**" ]
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read

jobs:
  tests:
    name: Unit tests & coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV

      - name: Run unit tests (pytest + coverage XML + JUnit)
        run: |
          pytest -m "not integration" \
            --cov=main --cov-report=xml --cov-report=term-missing \
            --junitxml=junit.xml

      - name: Debug coverage/junit presence
        if: always()
        run: |
          ls -la
          test -f coverage.xml && head -n 20 coverage.xml || echo "coverage.xml not found"
          test -f junit.xml && head -n 20 junit.xml || echo "junit.xml not found"

      - name: Upload tests reports (artifacts)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tests-reports
          path: |
            coverage.xml
            junit.xml
            .pytest_cache/

  it-mysql:
    name: Integration tests (MySQL)
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpass
          MYSQL_DATABASE: cnpdb
          MYSQL_USER: cnp_user
          MYSQL_PASSWORD: cnp_pass
        ports:
          - "3306:3306"
        options: >-
          --health-cmd="mysqladmin ping -prootpass"
          --health-interval=10s --health-timeout=5s --health-retries=15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Wait for MySQL and init schema
        run: |
          sudo apt-get update && sudo apt-get install -y mysql-client
          for i in {1..30}; do
            mysql -h 127.0.0.1 -uroot -prootpass -e "SELECT 1" && break
            sleep 2
          done
          mysql -h 127.0.0.1 -uroot -prootpass < db/init.sql
          # (Opcional, evita necesidad de 'cryptography' si tu driver lo requiere)
          mysql -h 127.0.0.1 -uroot -prootpass -e \
            "ALTER USER 'cnp_user'@'%' IDENTIFIED WITH mysql_native_password BY 'cnp_pass'; FLUSH PRIVILEGES;"

      - name: Run integration tests
        env:
          MYSQL_HOST: 127.0.0.1
          MYSQL_PORT: 3306
          MYSQL_USER: cnp_user
          MYSQL_PASSWORD: cnp_pass
          MYSQL_DB: cnpdb
          SAFE_APPROVE: "1"
        run: |
          pytest -m "integration" -q

  sonarqube:
    name: Build and analyze
    runs-on: ubuntu-latest
    needs: [ tests, it-mysql ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download coverage & junit from unit tests
        uses: actions/download-artifact@v4
        with:
          name: tests-reports
          path: .

      - name: Set up JDK (required by SonarQube Scanner)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.verbose=true
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.python.xunit.reportPath=junit.xml
            -Dsonar.projectBaseDir=.

      - name: Show Sonar task file (debug)
        if: always()
        run: |
          if [ -f .scannerwork/report-task.txt ]; then
            echo "---- report-task.txt ----"
            cat .scannerwork/report-task.txt
          else
            echo "No .scannerwork/report-task.txt found (scan may not have started)."
          fi

      - name: SonarQube Quality Gate (only on main)
        if: github.ref == 'refs/heads/main'
        uses: SonarSource/sonarqube-quality-gate-action@v1.2.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
